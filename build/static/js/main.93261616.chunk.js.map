{"version":3,"sources":["components/Dictionary.module.scss","components/Nav.module.scss","components/TextArea.module.scss","contexts/Wordcontext.js","components/TextArea.js","contexts/ThemeContext.js","components/ThemeButton.js","components/Nav.js","components/Dictionary.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","WordContext","createContext","WordProvider","children","useState","dictionary","setDictionary","updateDictionary","word","console","log","afterRemoveStorage","filterState","localStorage","removeItem","setItem","JSON","stringify","value","changeDictionary","getItem","parse","push","removeWord","elementKey","removeElement","filter","alertify","notify","Provider","TextArea","useContext","turkce","setTurkce","english","setEnglish","handleChange","target","name","trim","className","styles","container","form","form1","htmlFor","rows","cols","id","placeholder","onChange","form2","button","onClick","type","ThemeContext","ThemeProvider","theme","setTheme","toggleTheme","useEffect","changeHtmlClass","htmlTheme","$html","document","querySelector","classList","remove","add","ThemeButton","Nav","Component","Dictionary","td","map","key","delete","App","useLayoutEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.93261616.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Dictionary_container__CFLHg\",\"delete\":\"Dictionary_delete__3sHzC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Nav_container__1ud8s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"TextArea_form__1WOBA\",\"form1\":\"TextArea_form1__3JbUq\",\"form2\":\"TextArea_form2__1BW5v\",\"button\":\"TextArea_button__2ZWPm\"};","import React, { createContext, useState } from 'react';\r\nimport alertify from 'alertifyjs'\r\n\r\nconst WordContext = createContext();\r\n\r\nexport const WordProvider = ({children}) => {\r\n\r\n    const [dictionary,setDictionary] = useState([])\r\n\r\n    const changeDictionary = (word) => {\r\n        let dictionary;\r\n\r\n        if (localStorage.getItem(\"dictionary\") === null) {\r\n            dictionary = [];\r\n        } else {\r\n            dictionary = JSON.parse(localStorage.getItem(\"dictionary\"));\r\n        }\r\n        dictionary.push(word)\r\n\r\n        localStorage.setItem(\"dictionary\", JSON.stringify(dictionary));\r\n\r\n        updateDictionary(word);\r\n    }\r\n\r\n    const updateDictionary = (word) => {\r\n        if (dictionary === null) {\r\n            setDictionary(\r\n              [word]\r\n            )\r\n          } else {\r\n            setDictionary(\r\n              [...dictionary, word]\r\n            )\r\n          }\r\n      \r\n          console.log(dictionary)\r\n    }\r\n\r\n    const removeWord = (elementKey) => {\r\n        let removeElement = dictionary[elementKey]\r\n    \r\n        let filterState = dictionary.filter(word => word !== removeElement)\r\n    \r\n    \r\n    \r\n        setDictionary(\r\n          filterState\r\n        )\r\n    \r\n        afterRemoveStorage(filterState)\r\n        alertify.notify('Word Deleted ❕','error')\r\n    }\r\n    \r\n    const afterRemoveStorage = (filterState) => {\r\n        localStorage.removeItem(\"dictionary\");\r\n        localStorage.setItem(\"dictionary\", JSON.stringify(filterState));\r\n    }\r\n\r\n    const value = {\r\n        changeDictionary,dictionary,setDictionary,removeWord\r\n    } \r\n\r\n\r\n    return <WordContext.Provider value={value}> {children} </WordContext.Provider>\r\n}\r\n\r\nexport default WordContext;","import React, { useContext, useState } from 'react';\r\nimport styles from './TextArea.module.scss'\r\nimport WordContext from '../contexts//Wordcontext'\r\nimport alertify from 'alertifyjs'\r\n\r\n\r\nconst TextArea = () => {\r\n    const { changeDictionary } = useContext(WordContext);\r\n    const [turkce, setTurkce] = useState(\"\")\r\n    const [english, setEnglish] = useState(\"\")\r\n\r\n\r\n\r\n    const handleChange = (word) => {\r\n        if (word.target.name === \"turkce\") {\r\n            setTurkce(word.target.value.trim())\r\n        }\r\n        else {\r\n            setEnglish(word.target.value.trim())\r\n        }\r\n    }\r\n\r\n\r\n    const handleClick = () => {\r\n\r\n\r\n        changeDictionary({\r\n            turkce: turkce,\r\n            english: english\r\n        })\r\n\r\n        alertify.notify(\"Words Saved 🎉\" ,'success')\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.container}>\r\n                <form className={styles.form}  >\r\n                    <div className={styles.form1}>\r\n                        <label htmlFor=\"turkce\">Türkçe</label>\r\n                        <textarea rows=\"5\" cols=\"25\"\r\n                            id=\"turkce\"\r\n                            name=\"turkce\"\r\n                            placeholder=\"metin girin\"\r\n                            onChange={handleChange}\r\n                        />\r\n                    </div>\r\n                    <div className={styles.form2}>\r\n                        <label htmlFor=\"english\">English</label>\r\n                        <textarea rows=\"5\" cols=\"25\"\r\n                            id=\"english\"\r\n                            name=\"english\"\r\n                            placeholder=\"enter text\"\r\n                            onChange={handleChange}\r\n                        />\r\n                    </div>\r\n\r\n                </form>\r\n                <button className={styles.button} onClick={handleClick} type=\"button\">Save!</button>\r\n            </div>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default TextArea;","import React,{ useState,createContext,useEffect} from 'react'\r\n\r\nconst ThemeContext = createContext()\r\n\r\nexport const ThemeProvider = ({children}) => {\r\n    const [theme,setTheme] = useState('dark')\r\n        \r\n\r\n    const toggleTheme = () => {\r\n        if(theme === \"dark\"){\r\n            setTheme(\"light\")\r\n            localStorage.setItem(\"THEME\",theme)\r\n        }else if(theme === \"light\"){\r\n            setTheme(\"dark\")\r\n            localStorage.setItem(\"THEME\",theme)\r\n        }\r\n        else{\r\n            setTheme(localStorage.getItem(\"THEME\"))\r\n        }\r\n    }\r\n\r\n    const value = {\r\n        theme,\r\n        toggleTheme\r\n    }\r\n\r\n    useEffect(() => {\r\n        changeHtmlClass();\r\n    },[theme])\r\n    const changeHtmlClass = () => {\r\n        \r\n    const htmlTheme = localStorage.getItem('THEME');\r\n    const $html = document.querySelector('html');\r\n    $html.classList.remove('light')\r\n    $html.classList.remove('dark')\r\n    $html.classList.add(htmlTheme);\r\n    }\r\n\r\n    \r\n\r\n    return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>\r\n}\r\n\r\nexport default ThemeContext","import React, {useContext} from 'react';\r\nimport ThemeContext from '../contexts/ThemeContext'\r\nimport {FiSun,FiMoon} from 'react-icons/fi'\r\n\r\nconst ThemeButton = () => {\r\n    \r\n    const {toggleTheme,theme} = useContext(ThemeContext)\r\n    \r\n    return (\r\n        <div>\r\n            <button onClick={toggleTheme}>Theme <br/> {theme === \"dark\" ? <FiMoon/> : <FiSun/>}</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ThemeButton;","import React, { Component } from 'react';\r\nimport styles from './Nav.module.scss'\r\nimport ThemeButton from './ThemeButton';\r\n\r\nclass Nav extends Component {\r\n    render() {\r\n        return (\r\n            <div className={styles.container}>\r\n                <nav>\r\n                    <h1>Words</h1>\r\n                    <button>Game of Words</button>\r\n                    <ThemeButton/>\r\n                </nav>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Nav;","import React, { useContext } from 'react';\r\nimport styles from './Dictionary.module.scss'\r\nimport { AiOutlineClose } from 'react-icons/ai'\r\nimport WordContext from '../contexts/Wordcontext'\r\n\r\nconst Dictionary = () => {\r\n\r\n    const { dictionary,removeWord } = useContext(WordContext);\r\n    let td;\r\n\r\n\r\n    if (dictionary !== null) {\r\n        td = dictionary.map((word, key) => (\r\n\r\n            <tr key={key} >\r\n                <td>\r\n                    {word.turkce}\r\n                </td>\r\n                <td>\r\n                    {word.english}\r\n                </td>\r\n                <AiOutlineClose onClick={() => removeWord(key)} className={styles.delete} />\r\n            </tr>\r\n        ))\r\n    } else {\r\n        <></>\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Türkçe</th>\r\n                        <th>English</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {td}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Dictionary;","import React, { useLayoutEffect,useContext} from 'react';\nimport './App.scss'\nimport TextArea from './components/TextArea';\nimport Nav from './components/Nav'\nimport Dictionary from './components/Dictionary';\nimport Typing from 'react-typing-animation';\n\nimport {ThemeProvider} from './contexts/ThemeContext';\nimport WordContext from './contexts/Wordcontext'\n\nconst App = () => {\n\n  const { setDictionary } = useContext(WordContext);\n\n  \n  useLayoutEffect(() => {\n    setDictionary(\n     JSON.parse(localStorage.getItem(\"dictionary\"))\n    )\n  })\n\n    return (\n      <ThemeProvider>\n          <div className=\"App\">\n              <Nav />\n              <Typing>\n                <p>Ezberlemek istediğiniz kelimeleri kaydedebilir ve <br />\n                \"Game of Word\" butonuna basarak ezberini kolaylaştıracak<br />\n                oyunumuza gidebilirsin!</p>\n              </Typing>\n              <TextArea  />\n              <Dictionary />\n          </div>\n      </ThemeProvider>\n    );\n  \n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'alertifyjs/build/css/alertify.css';\nimport { WordProvider } from './contexts/Wordcontext';\n\n\nReactDOM.render(\n  <WordProvider>\n      <App />\n  </WordProvider>,\n  document.getElementById('root'),\n    \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}